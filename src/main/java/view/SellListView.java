/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.SellController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Client;
import model.Sell;

/**
 * **SellListView.java**
 * Esta classe representa a tela de listagem e gerenciamento de vendas. 
 * Permite visualizar, filtrar, editar, remover e ver os produtos de uma venda.
 *
 */
public class SellListView extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(SellListView.class.getName());
    private final SellController sellController = new SellController();

    /**
     * Construtor padrão da classe SellListView.
     * Inicializa componentes, carrega os dados e configura os listeners de estilo e ação.
     */
    public SellListView() {
        initComponents();
        loadSells();
        aplicarEstilo();

        tSell.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int column = tSell.columnAtPoint(evt.getPoint());
                int row = tSell.rowAtPoint(evt.getPoint());

                if (column == 0) {
                    editSell(row);
                }else if(column == 7){
                    viewSell(row);
                }else if(column == 1){
                    removeSell(row);
                }
            }
        });
    }
    
    /**
     * Remove a venda selecionada da tabela e do banco de dados após confirmação.
     */
    private void removeSell(int rowIndex){
        int sellId = (int) tSell.getValueAt(rowIndex, 2); 
        int confirm = JOptionPane.showConfirmDialog(this, 
        "Tem certeza que deseja remover a venda ID " + sellId + "?", 
        "Confirmação", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                sellController.deleteSell(sellId); 
                loadSells(); 
                JOptionPane.showMessageDialog(this, "Venda removida com sucesso!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao remover: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }

    
    /**
     * Abre a tela de edição (SellView) com os dados da venda selecionada.
     */
    private void editSell(int rowIndex) {

        try {

            int sellId = (int) tSell.getValueAt(rowIndex, 2);

            Sell sellToEdit = sellController.findByIdWithProducts(sellId);

            if (sellToEdit != null) {
                new SellView(sellToEdit).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Erro: Venda com ID " + sellId + " não encontrado.", "Erro de Busca", JOptionPane.ERROR_MESSAGE);
            }

        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(this, "Erro interno: ID da tabela não é um número válido. " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar venda: " + e.getMessage(), "Erro de Persistência", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Abre a tela de visualização dos produtos da venda selecionada.
    private void viewSell(int rowIndex) {
        try {
            int sellId = (int) tSell.getValueAt(rowIndex, 2);


            if (sellId > 0) {
                new SellProductsView(sellId).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Erro: Venda com ID " + sellId + " não encontrado.", "Erro de Busca", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(this, "Erro interno: ID da tabela não é um número válido. " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar venda: " + e.getMessage(), "Erro de Persistência", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tSell = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfCodigo = new javax.swing.JTextField();
        tfNome = new javax.swing.JTextField();
        tfCPF = new javax.swing.JTextField();
        btFiltrar = new javax.swing.JButton();
        btVenda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tSell.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Editar", "Remover", "ID", "Nome", "CPF", "Total", "Data", "Produtos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tSell);
        if (tSell.getColumnModel().getColumnCount() > 0) {
            tSell.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Código");

        jLabel2.setText("Nome");

        jLabel3.setText("CPF");

        btFiltrar.setText("Filtrar");
        btFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltrarActionPerformed(evt);
            }
        });

        btVenda.setText("+ Venda");
        btVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(btFiltrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btVenda)))))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFiltrar)
                    .addComponent(btVenda))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVendaActionPerformed
        java.awt.EventQueue.invokeLater(() -> new SellView().setVisible(true));
    }//GEN-LAST:event_btVendaActionPerformed

    private void btFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltrarActionPerformed
        filterSells();
    }//GEN-LAST:event_btFiltrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new SellListView().setVisible(true));
    }

    /**
     * Carrega todas as vendas disponíveis e preenche a tabela.
     * Este método é público para ser chamado externamente (e.g., após salvar/editar uma venda).
     */
    private void loadSells() {
        createTable(sellController.findAll());
    }

     /**
     * Filtra as vendas com base nos campos Código, Nome do Cliente e CPF do Cliente.
     */
    private void filterSells() {

        int codFilter = 0;

        try {

            if (!tfCodigo.getText().isEmpty()) {
                codFilter = Integer.parseInt(tfCodigo.getText());
            }

            createTable(sellController.filterSells(codFilter, tfNome.getText(), tfCPF.getText()));

        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "Erro: Certifique-se de que código, é um número válido.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);

        }

    }

    /**
     * Preenche a JTable com a lista de objetos Sell.
     */
    private void createTable(List<Sell> listSells) {

        DefaultTableModel modelo = (DefaultTableModel) tSell.getModel();
        modelo.setRowCount(0);

        for (Sell sell : listSells) {
            Client c1 = sell.getClient();
            modelo.addRow(new Object[]{
                "<html>✏</html>",
                "<html>❌</html>",
                sell.getId(),
                c1.getName(),
                c1.getCpf(),
                sell.getTotal(),
                sell.getSellDate(),
                "Ver produtos"
            });
        }
    }
    
    // --- Estilização e Aparência ---
    
    private void aplicarEstilo() {
        getContentPane().setBackground(new Color(245, 240, 230));

        estilizarBotao(btFiltrar, new Color(160, 130, 90));  
        estilizarBotao(btVenda, new Color(160, 130, 90));     

        tSell.getTableHeader().setBackground(new Color(180, 150, 110)); 
        tSell.getTableHeader().setForeground(Color.WHITE);
        tSell.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));

        tSell.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        tSell.setRowHeight(25);


        tSell.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(
                    javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                java.awt.Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (!isSelected) {
                    c.setBackground(row % 2 == 0 ? new Color(250, 247, 240) : Color.WHITE);
                    c.setForeground(new Color(60, 50, 40));
                } else {
                    c.setBackground(new Color(193, 154, 107));
                    c.setForeground(Color.WHITE);
                }
                return c;
            }
        });
    }

    private void estilizarBotao(javax.swing.JButton botao, Color corBase) {
        botao.setFocusPainted(false);
        botao.setForeground(Color.WHITE);
        botao.setBackground(corBase);
        botao.setFont(new Font("Segoe UI", Font.BOLD, 14));
        botao.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        botao.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        botao.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent e) {
                botao.setBackground(corBase.brighter());
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent e) {
                botao.setBackground(corBase);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btFiltrar;
    private javax.swing.JButton btVenda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tSell;
    private javax.swing.JTextField tfCPF;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JTextField tfNome;
    // End of variables declaration//GEN-END:variables
}
